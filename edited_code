from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def scrapeRedfin(house_num, street_name, zipcode):
	address = f'{house_num} {street_name} {zipcode}'.lower()

	driver = webdriver.Chrome(ChromeDriverManager().install())

	url = 'https://www.redfin.com/'
	driver.get(url)

	wait = WebDriverWait(driver, 5)

	search_field = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'input#search-box-input')))
	search_field.send_keys(address)

	address_link = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.ExpandedResults div.expanded-section div.expanded-row-content a.item-title')))
	driver.execute_script('arguments[0].click()', address_link)

	# MAIN RESULTS PAGE

	parcel_id = ''
	estimate = ''
	beds = ''
	baths = ''
	square_footage = ''
	stories = ''
	lot_size = ''
	style = ''
	year_built = ''
	year_renovated = ''
	county = ''
	estimated_price_r = ''
	car_dependency = ''
	bike_dependency = ''
	
	# TOP STATISTICS
	try:
		main_statistics = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div[data-rf-test-id="abp-homeinfo-homemainstats"]')))

		estimate = driver.execute_script('return arguments[0].children[0].children[0].innerText', main_statistics)

	except Exception as error:
		print(error)

	# BOTTOM STATISTICS
	try:
		facts_table = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.median-values div.facts-table')))

		beds = driver.execute_script('return arguments[0].children[0].children[1].innerText', facts_table)
		baths = driver.execute_script('return arguments[0].children[1].children[1].innerText', facts_table)
		square_footage = driver.execute_script('return arguments[0].children[2].children[1].innerText', facts_table)
		stories = driver.execute_script('return arguments[0].children[3].children[1].innerText', facts_table)
		lot_size = driver.execute_script('return arguments[0].children[4].children[1].innerText', facts_table)
		style = driver.execute_script('return arguments[0].children[5].children[1].innerText', facts_table)
		year_built = driver.execute_script('return arguments[0].children[6].children[1].innerText', facts_table)
		year_renovated = driver.execute_script('return arguments[0].children[7].children[1].innerText', facts_table)
		county = driver.execute_script('return arguments[0].children[8].children[1].innerText', facts_table)
		parcel_id = driver.execute_script('return arguments[0].children[9].children[1].innerText', facts_table)
		estimated_price_r = driver.find_element_by_xpath('//*[@id="sideBarContent"]/div/div[2]/div[2]/div[2]').text
		car_dependency = driver.find_element_by_xpath('//*[@id="neighborhoodInfo-collapsible"]/div[2]/div/div/div[3]/div[1]/div/div[1]/div[1]/div/span[1]').text
		bike_dependency = driver.find_element_by_xpath('//*[@id="neighborhoodInfo-collapsible"]/div[2]/div/div/div[3]/div[1]/div/div[2]/div[1]/div/span[1]').text

		print(
			beds,
			baths,
			square_footage,
			stories,
			lot_size,
			style,
			year_built,
			year_renovated,
			county,
			parcel_id,
			estimated_price_r,
			car_dependency,
			bike_dependency
		)
	except Exception as error:
		print(error)

	scrape_info_dict = dict(
		error=False,
		url=driver.current_url,
		parcel_id=parcel_id,
		estimate=estimate,
		beds=beds,
		baths=baths,
		square_footage=square_footage,
		stories=stories,
		lot_size=lot_size,
		style=style,
		year_built=year_built,
		year_renovated=year_renovated,
		county=county,
		price_range=estimated_price_r,
		car_dependency=car_dependency,
		bike_dependency=bike_dependency
	)

	return scrape_info_dict

addr = scrapeRedfin('155', 'e center st', '84004')
print(addr)
